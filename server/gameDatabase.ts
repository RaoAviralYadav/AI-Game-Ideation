import type { SourceGame } from "@shared/schema";

export const sourceGamesDatabase: SourceGame[] = [
  {
    id: "drop-away",
    name: "Drop Away",
    developer: "Rollic",
    templateType: "Template 1 (Closed Grid)",
    constraintType: "Time-based",
    interactionMethod: "Tap & Move",
    puzzleCategory: "Hole absorption puzzle",
    screenshotUrl: "https://xwigctgcyleirwbityxz.supabase.co/storage/v1/object/public/Game%20screenshots/Drop%20away/Screenshot%202025-10-11%20at%207.45.08%20AM.png",
    mechanics: {
      controllableObjects: "Colored holes in various shapes (plus-shaped, L-shaped, rectangular, square)",
      targetObjects: "Colored characters scattered throughout grid",
      obstacles: "Other holes and characters that block movement paths",
    },
    coreGameplayLoop: [
      "Player taps colored hole to select it",
      "Player moves hole around the grid toward matching colored characters",
      "When hole touches matching colored character, character gets absorbed",
      "Navigate around blocking holes and characters to reach targets",
      "Clear movement paths by absorbing accessible characters first",
      "Repeat until all characters absorbed within time limit",
    ],
    winCondition: "Absorb all colored characters using matching holes within 1:30 time limit",
    loseCondition: "Time expires with characters still remaining on the grid",
    strategicElements: [
      "Path planning around obstacles (holes and characters block movement)",
      "Movement sequence optimization (which characters to absorb first)",
      "Shape efficiency (different hole shapes affect movement and absorption)",
      "Spatial navigation within confined grid boundaries",
    ],
    innovationElements: [
      "Player controls absorption tools (holes) rather than targets (characters)",
      "Various hole shapes create different movement characteristics",
      "Time pressure adds urgency to spatial puzzle solving",
      "Direct hole manipulation provides tactile satisfaction",
    ],
    uniqueMechanics: [
      "Holes are the controllable elements, not the characters",
      "Character absorption happens on contact with matching colored holes",
      "Movement restrictions from other objects create puzzle complexity",
      "Multiple hole shapes add variety to absorption patterns",
    ],
  },
  {
    id: "sky-rush",
    name: "Sky Rush",
    developer: "Rollic",
    templateType: "Template 1 (Closed Grid)",
    constraintType: "Time-based",
    interactionMethod: "Tap & Move (hold and drag)",
    puzzleCategory: "Bus collection and evacuation puzzle",
    screenshotUrl: "https://xwigctgcyleirwbityxz.supabase.co/storage/v1/object/public/Game%20screenshots/Sky%20rush/Screenshot%202025-10-11%20at%207.46.39%20AM.png",
    mechanics: {
      controllableObjects: "Colored buses within the grid with visible capacity indicators",
      targetObjects: "Colored exit gates on grid borders with matching colored passenger queues waiting outside",
    },
    coreGameplayLoop: [
      "Player taps and drags colored bus within the grid",
      "Navigate bus toward matching colored exit gate",
      "When bus reaches correct gate, matching colored passengers board automatically",
      "Bus with passengers evacuates/disappears from the grid",
      "Continue moving remaining buses to their matching gates",
      "Clear all buses within time limit",
    ],
    winCondition: "All buses successfully evacuated with their matching passengers within time limit",
    loseCondition: "Time expires with buses still remaining in the grid",
    strategicElements: [
      "Path planning within confined grid space",
      "Bus capacity optimization (ensure efficient passenger loading)",
      "Movement sequence planning (avoid blocking other buses)",
      "Time management under evacuation scenario pressure",
    ],
    innovationElements: [
      "Evacuation theme creates urgency and purpose",
      "Multiple simultaneous objectives (all buses must be cleared)",
      "Passenger collection happens automatically at gates",
      "Closed grid navigation with multiple exit points",
    ],
    uniqueMechanics: [
      "Buses collect passengers automatically when reaching matching gates",
      "Multiple colored exit points around grid perimeter",
      "Hold and drag movement for precise bus positioning",
      "Evacuation scenario provides clear thematic context",
    ],
  },
  {
    id: "gecko-out",
    name: "Gecko Out",
    developer: "Rollic",
    templateType: "Template 1 (Closed Grid)",
    constraintType: "Time-based",
    interactionMethod: "Tap & Move",
    puzzleCategory: "Navigation puzzle",
    screenshotUrl: "https://xwigctgcyleirwbityxz.supabase.co/storage/v1/object/public/Game%20screenshots/Gecko%20Out/Screenshot%202025-10-11%20at%207.27.50%20AM.png",
    mechanics: {
      controllableObjects: "Colored snakes (various lengths: 4-grid, 6-grid, 8-grid)",
      targetObjects: "Colored holes (matching colors to snakes)",
      obstacles: "Other snakes blocking paths, irregular maze walls",
    },
    coreGameplayLoop: [
      "Player taps snake to select",
      "Player drags snake through maze paths",
      "Snake moves to matching colored hole",
      "Snake disappears when reaching correct hole",
      "Repeat until all snakes cleared",
    ],
    winCondition: "Clear all snakes into matching holes within time limit",
    loseCondition: "Time expires with snakes remaining on board",
    strategicElements: [
      "Sequential planning (which snake to move first)",
      "Path blocking (snakes prevent other snakes from moving)",
      "Maze navigation (irregular pathways create routing challenges)",
    ],
    innovationElements: [
      "Irregular grid structure vs standard square grids",
      "Variable snake lengths creating different movement constraints",
      "FIFO-style sequential clearing requirements",
    ],
    uniqueMechanics: [
      "Snakes have variable lengths affecting movement",
      "Irregular maze layout instead of standard grid",
      "Sequential blocking creates puzzle progression",
    ],
  },
  {
    id: "park-match",
    name: "Park Match",
    developer: "Supersonic",
    templateType: "Template 3 (Three-Layer System)",
    constraintType: "Space-based",
    interactionMethod: "Tap only",
    puzzleCategory: "Queue management/resource allocation puzzle",
    screenshotUrl: "https://xwigctgcyleirwbityxz.supabase.co/storage/v1/object/public/Game%20screenshots/Park%20Match/Screenshot%202025-10-11%20at%207.28.54%20AM.png",
    mechanics: {
      controllableObjects: "Colored cars (bottom layer) with visible capacity numbers (2-5 passengers)",
      targetObjects: "Colored passenger queues (top layer) - stacked in FIFO order",
      obstacles: "Limited center space (7 parking spots), FIFO queue restrictions",
    },
    coreGameplayLoop: [
      "Player taps colored car from bottom grid",
      "Car moves to available center parking spot",
      "If matching colored passenger is first in any top queue, passenger boards car",
      "Car fills up to its capacity limit (2-5 passengers depending on car type)",
      "When car reaches full capacity, it disappears with all passengers",
      "If no matching passenger available, car stays idle, blocking center space",
      "Repeat until all passengers cleared or center space full",
    ],
    winCondition: "Clear all passenger queues by strategic car deployment",
    loseCondition: "Center parking area becomes full with idle cars, no space for new cars, passengers still waiting",
    strategicElements: [
      "FIFO queue management (only front passengers can board)",
      "Capacity optimization (larger cars clear more passengers but take longer to fill)",
      "Space economy (limited center spots require careful planning)",
      "Car type selection (when to use high-capacity vs quick-fill cars)",
      "Color sequence prediction (anticipate which passengers become available next)",
    ],
    innovationElements: [
      "Three-layer workflow system (bottom→center→top processing)",
      "FIFO constraint creates strategic depth beyond simple color matching",
      "Space pressure as primary failure condition",
      "Idle resource management (cars can block progress if used incorrectly)",
    ],
    uniqueMechanics: [
      "Cars stay in center until passenger match found",
      "Only accessible (front) passengers can board",
      "Center space management is core strategic challenge",
      "Capacity numbers create car selection strategy",
    ],
  },
  {
    id: "block-jam",
    name: "Block Jam",
    developer: "Voodoo",
    templateType: "Template 2 (Two-Layer System)",
    constraintType: "Space-based",
    interactionMethod: "Tap only",
    puzzleCategory: "Match-3 sorting puzzle",
    screenshotUrl: "https://xwigctgcyleirwbityxz.supabase.co/storage/v1/object/public/Game%20screenshots/Block%20jam/Screenshot%202025-10-11%20at%207.30.07%20AM.png",
    mechanics: {
      controllableObjects: "Colored blocky characters arranged in grid formation (top layer 75%) with visual states: Active (awake/alert), Inactive (sleeping/dimmed)",
      targetObjects: "Empty parking spots (bottom layer 10-15%)",
      obstacles: "Limited number of parking spaces",
    },
    coreGameplayLoop: [
      "Player taps accessible (awake) blocky character from top grid area",
      "Character walks/moves to available parking spot in bottom area",
      "When 3 characters of same color gather in parking area, they disappear",
      "Parking space becomes free for new characters",
      "Previously blocked characters wake up and become accessible",
      "Repeat until all characters from grid are cleared",
    ],
    winCondition: "Clear all blocky characters from the grid area through match-3 combinations",
    loseCondition: "Parking area becomes completely full with no matching sets possible, characters still remaining in grid",
    strategicElements: [
      "FIFO management with visual feedback (sleeping vs awake characters)",
      "Space economy (limited parking spots require planning)",
      "Match-3 timing (when to complete sets vs accumulate more characters)",
      "Accessibility prediction (which sleeping characters will wake up next)",
    ],
    innovationElements: [
      "Clear active/inactive visual differentiation (sleeping mechanic)",
      "Walking animation provides satisfaction and clarity",
      "Two-layer simplification with character personality",
    ],
    uniqueMechanics: [
      "Only awake characters can be tapped and moved",
      "Characters walk to parking area (not instant teleport)",
      "Sleeping characters become active as blockers are removed",
      "Automatic match-3 clearing when 3 same colors gather",
    ],
  },
  {
    id: "knit-out",
    name: "Knit Out",
    developer: "Rollic",
    templateType: "Template 3 (Three-Layer System)",
    constraintType: "Space-based",
    interactionMethod: "Tap only",
    puzzleCategory: "Thread processing/crafting puzzle",
    screenshotUrl: "https://xwigctgcyleirwbityxz.supabase.co/storage/v1/object/public/Game%20screenshots/Knit%20Out/Screenshot%202025-10-11%20at%207.30.30%20AM.png",
    mechanics: {
      controllableObjects: "Colored knits/thread holders (bottom layer 65%) with different capacities",
      targetObjects: "Colored thread stacks (top layer 30%) with FIFO access and completion percentages",
      obstacles: "Limited center processing slots (5 slots)",
    },
    coreGameplayLoop: [
      "Player taps colored knit from bottom grid",
      "Knit moves to available center processing slot",
      "Knit automatically pulls matching colored threads from top stacks",
      "Threads get processed and collected into the knit",
      "When knit reaches capacity, it disappears with collected threads",
      "Center slot becomes free for new knit",
      "Repeat until all threads are processed",
    ],
    winCondition: "Process all threads from top stacks using strategic knit deployment",
    loseCondition: "All center slots occupied with knits but threads remain unprocessed",
    strategicElements: [
      "Color matching between knits and available threads",
      "Capacity management (when to deploy vs wait)",
      "Space economy (limited center processing slots)",
      "Thread accessibility planning (which threads become available next)",
    ],
    innovationElements: [
      "Automatic thread collection with visual satisfaction",
      "Percentage indicators show thread completion progress",
      "Crafting theme with tactile thread-pulling mechanics",
      "Three-layer automation workflow",
    ],
    uniqueMechanics: [
      "Knits automatically collect threads (no manual dragging)",
      "Visual thread-pulling animation from top to center",
      "Processing happens continuously while knit is in center slot",
      "Thread percentage completion provides progress feedback",
    ],
  },
  {
    id: "crowd-express",
    name: "Crowd Express",
    developer: "Rollic",
    templateType: "Template 3 (Three-Layer System)",
    constraintType: "Space-based",
    interactionMethod: "Tap only",
    puzzleCategory: "Directional traffic puzzle with passenger boarding",
    screenshotUrl: "https://xwigctgcyleirwbityxz.supabase.co/storage/v1/object/public/Game%20screenshots/Crowd%20express/Screenshot%202025-10-11%20at%207.31.07%20AM.png",
    mechanics: {
      controllableObjects: "Directional colored buses (bottom layer 65%) with directional arrows indicating movement constraints",
      targetObjects: "Colored passenger queues (top layer 30%) with FIFO boarding system",
      obstacles: "Buses arranged in traffic jam formation with blocking mechanics, 5 center parking slots",
    },
    coreGameplayLoop: [
      "Player taps colored bus from bottom traffic area",
      "Bus moves in direction shown by arrow (if path is unblocked)",
      "If path blocked by other buses, bus cannot move",
      "Unblocked bus reaches center parking spot",
      "Matching colored passengers from top queues board the bus automatically",
      "Bus with passengers disappears, parking spot becomes free",
      "If no matching passengers available, bus stays idle in parking spot",
    ],
    winCondition: "Clear all buses from bottom area by strategic movement and passenger boarding",
    loseCondition: "All parking spots occupied with idle buses, no matching passenger queues available",
    strategicElements: [
      "Directional Path Planning: Buses can only move in arrow direction",
      "Traffic Unblocking: Must move blocking buses to free desired buses",
      "Movement Sequence: Which bus to tap first determines traffic flow",
      "Space economy (limited parking spots)",
      "Passenger queue management (FIFO boarding system)",
    ],
    innovationElements: [
      "Directional movement constraints create traffic puzzle complexity",
      "Combines path blocking with passenger boarding",
      "Traffic jam aesthetic appeals to universal experience",
      "Movement restrictions force strategic thinking",
    ],
    uniqueMechanics: [
      "Buses only move in predetermined directions (arrow indicators)",
      "Path blocking prevents movement until obstacles cleared",
      "Automatic passenger boarding when buses reach center",
      "Traffic flow management is primary strategic challenge",
    ],
  },
];
